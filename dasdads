[1mdiff --git a/app/build.gradle b/app/build.gradle[m
[1mindex c72f2a0..aeb73eb 100644[m
[1m--- a/app/build.gradle[m
[1m+++ b/app/build.gradle[m
[36m@@ -89,6 +89,7 @@[m [mdependencies {[m
 [m
 [m
 [m
[31m-[m
[32m+[m[32m    implementation 'com.google.android.material:material:1.8.0-alpha03'[m
[32m+[m[32m    implementation 'androidx.appcompat:appcompat:1.5.1'[m
 [m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Adapters/CurrencyAdapter.kt b/app/src/main/java/com/example/currencyexchange/Adapters/CurrencyAdapter.kt[m
[1mindex 339adc2..12c8c1b 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Adapters/CurrencyAdapter.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Adapters/CurrencyAdapter.kt[m
[36m@@ -6,13 +6,12 @@[m [mimport android.view.ViewGroup[m
 import android.widget.TextView[m
 import androidx.recyclerview.widget.RecyclerView[m
 import com.example.currencyexchange.R[m
[31m-import org.w3c.dom.Text[m
 import java.util.*[m
 [m
[31m-class CurrencyAdapter() : RecyclerView.Adapter<CurrencyAdapter.ViewHolder>(){[m
[32m+[m[32mclass CurrencyAdapter() : RecyclerView.Adapter<CurrencyAdapter.ViewHolder>() {[m
     private var data = sortedMapOf<String, Double>()[m
 [m
[31m-    fun setData(data: SortedMap<String, Double>){[m
[32m+[m[32m    fun setData(data: SortedMap<String, Double>) {[m
         this.data = data[m
         notifyDataSetChanged()[m
     }[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Adapters/FluctuationAdapter.kt b/app/src/main/java/com/example/currencyexchange/Adapters/FluctuationAdapter.kt[m
[1mindex ebda3fe..d6b61b5 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Adapters/FluctuationAdapter.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Adapters/FluctuationAdapter.kt[m
[36m@@ -34,15 +34,22 @@[m [mclass FluctuationAdapter : RecyclerView.Adapter<FluctuationAdapter.ViewHolder>()[m
     }[m
 [m
     override fun onBindViewHolder(holder: ViewHolder, position: Int) {[m
[31m-        holder.binding.fluctuationRvForeignCurrency.text = String.format("Currency name: %s", mCurrenciesNames[position])[m
[31m-        holder.binding.fluctuationRvStartRate.text = String.format("Currency start rate: %.2f".format(mCurrenciesStartRates[position]))[m
[31m-        holder.binding.fluctuationRvEndRate.text = String.format("Currency end rate: %.2f".format(mCurrenciesEndRates[position]))[m
[31m-        holder.binding.fluctuationRvChange.text = String.format("Currency change: %.2f".format(mCurrenciesChange[position]))[m
[31m-        holder.binding.fluctuationRvChangePct.text = String.format("Currency change pct: %.2f".format(mCurrenciesChangePct[position]))[m
[32m+[m[32m        holder.binding.fluctuationRvForeignCurrency.text =[m
[32m+[m[32m            String.format("Currency name: %s", mCurrenciesNames[position])[m
[32m+[m[32m        holder.binding.fluctuationRvStartRate.text =[m
[32m+[m[32m            String.format("Currency start rate: %.2f".format(mCurrenciesStartRates[position]))[m
[32m+[m[32m        holder.binding.fluctuationRvEndRate.text =[m
[32m+[m[32m            String.format("Currency end rate: %.2f".format(mCurrenciesEndRates[position]))[m
[32m+[m[32m        holder.binding.fluctuationRvChange.text =[m
[32m+[m[32m            String.format("Currency change: %.2f".format(mCurrenciesChange[position]))[m
[32m+[m[32m        holder.binding.fluctuationRvChangePct.text =[m
[32m+[m[32m            String.format("Currency change pct: %.2f".format(mCurrenciesChangePct[position]))[m
     }[m
[32m+[m
     override fun getItemCount(): Int {[m
         return mCurrenciesNames.size[m
     }[m
 [m
[31m-    inner class ViewHolder(var binding: FluctuationItemsBinding) : RecyclerView.ViewHolder(binding.root)[m
[32m+[m[32m    inner class ViewHolder(var binding: FluctuationItemsBinding) :[m
[32m+[m[32m        RecyclerView.ViewHolder(binding.root)[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Adapters/HistoricalAdapter.kt b/app/src/main/java/com/example/currencyexchange/Adapters/HistoricalAdapter.kt[m
[1mindex 1ee41b9..a69c419 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Adapters/HistoricalAdapter.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Adapters/HistoricalAdapter.kt[m
[36m@@ -17,18 +17,21 @@[m [mclass HistoricalAdapter() : RecyclerView.Adapter<HistoricalAdapter.ViewHolder>()[m
     }[m
 [m
     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {[m
[31m-        val view = HistoricalItemsBinding.inflate(LayoutInflater.from(parent.context), parent, false)[m
[32m+[m[32m        val view =[m
[32m+[m[32m            HistoricalItemsBinding.inflate(LayoutInflater.from(parent.context), parent, false)[m
         return ViewHolder(view)[m
     }[m
 [m
     override fun onBindViewHolder(holder: ViewHolder, position: Int) {[m
         holder.binding.historicalItemsSymbol.text = mData.keys.toTypedArray()[position][m
[31m-        holder.binding.historicalItemsValue.text = String.format("%.2f", mData.get(mData.keys.toTypedArray()[position]))[m
[32m+[m[32m        holder.binding.historicalItemsValue.text =[m
[32m+[m[32m            String.format("%.2f", mData.get(mData.keys.toTypedArray()[position]))[m
     }[m
 [m
     override fun getItemCount(): Int {[m
         return mData.size[m
     }[m
 [m
[31m-    inner class ViewHolder(var binding: HistoricalItemsBinding) : RecyclerView.ViewHolder(binding.root)[m
[32m+[m[32m    inner class ViewHolder(var binding: HistoricalItemsBinding) :[m
[32m+[m[32m        RecyclerView.ViewHolder(binding.root)[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Adapters/PagerAdapter.kt b/app/src/main/java/com/example/currencyexchange/Adapters/PagerAdapter.kt[m
[1mindex ad68da1..34d3b53 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Adapters/PagerAdapter.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Adapters/PagerAdapter.kt[m
[36m@@ -2,21 +2,27 @@[m [mpackage com.example.currencyexchange.Adapters[m
 [m
 import androidx.fragment.app.Fragment[m
 import androidx.viewpager2.adapter.FragmentStateAdapter[m
[31m-import com.example.currencyexchange.Fragments.*[m
 import java.lang.IllegalArgumentException[m
 [m
[31m-class PagerAdapter(fragment: Fragment) : FragmentStateAdapter(fragment) {[m
[32m+[m[32mclass PagerAdapter(fragment: Fragment, fragmentList: List<Fragment>) :[m
[32m+[m[32m    FragmentStateAdapter(fragment) {[m
[32m+[m[32m    private val NUM_PAGES: List<Fragment> = fragmentList[m
[32m+[m
     override fun getItemCount(): Int {[m
[31m-        return 4[m
[32m+[m[32m        return NUM_PAGES.size[m
     }[m
 [m
     override fun createFragment(position: Int): Fragment {[m
         return when (position) {[m
[31m-            0 -> Latest()[m
[31m-            1 -> Conversion()[m
[31m-            2 -> Fluctuation()[m
[31m-            3 -> HistoricalRates()[m
[32m+[m[32m            0 -> NUM_PAGES[0][m
[32m+[m[32m            1 -> NUM_PAGES[1][m
[32m+[m[32m            2 -> NUM_PAGES[2][m
[32m+[m[32m            3 -> NUM_PAGES[3][m
             else -> throw IllegalArgumentException("Error in FragmentStateAdapter")[m
         }[m
     }[m
[32m+[m
[32m+[m[32m    override fun getItemId(position: Int): Long {[m
[32m+[m[32m        return position.toLong()[m
[32m+[m[32m    }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Database/CurrencyDatabase.kt b/app/src/main/java/com/example/currencyexchange/Database/CurrencyDatabase.kt[m
[1mindex 5508f2a..a0a1a5a 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Database/CurrencyDatabase.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Database/CurrencyDatabase.kt[m
[36m@@ -11,7 +11,11 @@[m [mimport com.example.currencyexchange.Models.CurrencyNamesModel[m
 import kotlinx.coroutines.CoroutineScope[m
 import kotlinx.coroutines.launch[m
 [m
[31m-@Database(entities = arrayOf(CurrencyNamesModel::class, BaseCurrencyModel::class), version = 1, exportSchema = false)[m
[32m+[m[32m@Database([m
[32m+[m[32m    entities = arrayOf(CurrencyNamesModel::class, BaseCurrencyModel::class),[m
[32m+[m[32m    version = 1,[m
[32m+[m[32m    exportSchema = false[m
[32m+[m[32m)[m
 abstract class CurrencyDatabase() : RoomDatabase() {[m
 [m
     abstract fun getDAO(): CurrencyDAO[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/ChangeBaseCurrency.kt b/app/src/main/java/com/example/currencyexchange/Fragments/ChangeBaseCurrency.kt[m
[1mindex cb48b81..5e39c85 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/ChangeBaseCurrency.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/ChangeBaseCurrency.kt[m
[36m@@ -13,7 +13,6 @@[m [mimport androidx.navigation.fragment.findNavController[m
 import androidx.navigation.fragment.navArgs[m
 import com.example.currencyexchange.Application.CurrencyApplication[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
[31m-import com.example.currencyexchange.R[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.ViewModels.ChangeBaseFactory[m
 import com.example.currencyexchange.ViewModels.ChangeBaseViewModel[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/Conversion.kt b/app/src/main/java/com/example/currencyexchange/Fragments/Conversion.kt[m
[1mindex 77f5066..dea29e5 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/Conversion.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/Conversion.kt[m
[36m@@ -11,9 +11,11 @@[m [mimport androidx.fragment.app.Fragment[m
 import androidx.fragment.app.setFragmentResult[m
 import androidx.lifecycle.Observer[m
 import androidx.lifecycle.ViewModelProvider[m
[32m+[m[32mimport androidx.navigation.fragment.findNavController[m
 import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.Application.CurrencyApplication[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
[32m+[m[32mimport com.example.currencyexchange.R[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
 import com.example.currencyexchange.ViewModels.*[m
[36m@@ -34,6 +36,7 @@[m [mclass Conversion : Fragment() {[m
     private var mDesiredCurrency: String = "default"[m
     private var mCurrencies: MutableList<CurrencyNamesModel> = mutableListOf()[m
 [m
[32m+[m
     override fun onCreateView([m
         inflater: LayoutInflater, container: ViewGroup?,[m
         savedInstanceState: Bundle?[m
[36m@@ -46,6 +49,15 @@[m [mclass Conversion : Fragment() {[m
             this,[m
             ConversionFactory(CurrencyRetrofitRepository(mApiInstance), mDatabaseInstance!!)[m
         )[ConversionViewModel::class.java][m
[32m+[m[32m        mBinding.conversionRefreshContainer.setOnRefreshListener {[m
[32m+[m[32m            val id = findNavController().currentDestination?.id[m
[32m+[m[32m            findNavController().popBackStack(id!!, true)[m
[32m+[m[32m            findNavController().navigate(id)[m
[32m+[m
[32m+[m[32m            mBinding.conversionRefreshContainer.isRefreshing = false[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
         return view[m
     }[m
 [m
[36m@@ -53,6 +65,7 @@[m [mclass Conversion : Fragment() {[m
         super.onViewCreated(view, savedInstanceState)[m
         mBinding.conversionChangeBaseCurrency.setOnClickListener {[m
             setFragmentResult("request_key", bundleOf("fragment_name" to TAG))[m
[32m+[m[32m            findNavController().navigate(R.id.action_from_base_to_change)[m
         }[m
         mViewModel.baseCurrency.observe(viewLifecycleOwner, Observer {[m
             mBinding.conversionFromTv.text = String.format("From: %s", it)[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/Fluctuation.kt b/app/src/main/java/com/example/currencyexchange/Fragments/Fluctuation.kt[m
[1mindex 36aecf9..5db5383 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/Fluctuation.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/Fluctuation.kt[m
[36m@@ -14,11 +14,13 @@[m [mimport androidx.fragment.app.Fragment[m
 import androidx.fragment.app.setFragmentResult[m
 import androidx.lifecycle.*[m
 import androidx.lifecycle.Observer[m
[32m+[m[32mimport androidx.navigation.fragment.findNavController[m
 import androidx.recyclerview.widget.LinearLayoutManager[m
 import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.Adapters.FluctuationAdapter[m
 import com.example.currencyexchange.Application.CurrencyApplication[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
[32m+[m[32mimport com.example.currencyexchange.R[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
 import com.example.currencyexchange.ViewModels.*[m
[36m@@ -28,8 +30,8 @@[m [mimport java.util.*[m
 [m
 class Fluctuation : Fragment() {[m
     private val TAG = "Fluctuation"[m
[31m-    private val mYearInMilis = 31556926000[m
[31m-    private val mDayInMilis = 86400000[m
[32m+[m[32m    private val mYearInMs = 31556926000[m
[32m+[m[32m    private val mDayInMs = 86400000[m
 [m
     // VARIABLES[m
     private var mFluctuationAdapter: FluctuationAdapter? = null[m
[36m@@ -57,7 +59,7 @@[m [mclass Fluctuation : Fragment() {[m
     private var mDatabaseInstance: CurrencyDatabaseRepository? = null[m
     private lateinit var mViewModel: FluctuationViewModel[m
 [m
[31m-//  View binding[m
[32m+[m[32m    //  View binding[m
     private var _binding: FragmentFluctuationBinding? = null[m
     private val mBinding get() = _binding!![m
 [m
[36m@@ -74,16 +76,28 @@[m [mclass Fluctuation : Fragment() {[m
             FluctuationFactory(CurrencyRetrofitRepository(mApiInstance), mDatabaseInstance!!)[m
         ).get(FluctuationViewModel::class.java)[m
 [m
[31m-        mViewModel.baseCurrency.observe(requireActivity(), androidx.lifecycle.Observer { mBaseCurrency = it })[m
[32m+[m[32m        mViewModel.baseCurrency.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { mBaseCurrency = it })[m
         mViewModel.allCurrencies.observe(requireActivity(), androidx.lifecycle.Observer {[m
             mAllCurrencies.addAll(it)[m
             mCurrencyList.addAll(it)[m
         })[m
[31m-        mViewModel.currenciesNames.observe(requireActivity(), androidx.lifecycle.Observer { currenciesNames.add(it) })[m
[31m-        mViewModel.currenciesStartRates.observe(requireActivity(), androidx.lifecycle.Observer { currenciesStartRates.addAll(listOf(it)) })[m
[31m-        mViewModel.currenciesEndRates.observe(requireActivity(), androidx.lifecycle.Observer { currenciesEndRates.addAll(listOf(it)) })[m
[31m-        mViewModel.currenciesChange.observe(requireActivity(), androidx.lifecycle.Observer { currenciesChange.addAll(listOf(it)) })[m
[31m-        mViewModel.currenciesChangePct.observe(requireActivity(), androidx.lifecycle.Observer { currenciesChangePct.addAll(listOf(it)) })[m
[32m+[m[32m        mViewModel.currenciesNames.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { currenciesNames.add(it) })[m
[32m+[m[32m        mViewModel.currenciesStartRates.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { currenciesStartRates.addAll(listOf(it)) })[m
[32m+[m[32m        mViewModel.currenciesEndRates.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { currenciesEndRates.addAll(listOf(it)) })[m
[32m+[m[32m        mViewModel.currenciesChange.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { currenciesChange.addAll(listOf(it)) })[m
[32m+[m[32m        mViewModel.currenciesChangePct.observe([m
[32m+[m[32m            requireActivity(),[m
[32m+[m[32m            androidx.lifecycle.Observer { currenciesChangePct.addAll(listOf(it)) })[m
         mViewModel.isDone.observe(requireActivity(), Observer {[m
             when (it) {[m
                 true -> {[m
[36m@@ -100,6 +114,11 @@[m [mclass Fluctuation : Fragment() {[m
                 else -> Log.i(TAG, "getCurrencies: MISSING DATA?")[m
             }[m
         })[m
[32m+[m[32m        mBinding.fluctuationRefreshContainer.setOnRefreshListener {[m
[32m+[m[32m            //          TODO - finish refreshing. How to reset whole layout?[m
[32m+[m
[32m+[m[32m            mBinding.fluctuationRefreshContainer.isRefreshing = false[m
[32m+[m[32m        }[m
         return view[m
     }[m
 [m
[36m@@ -109,7 +128,7 @@[m [mclass Fluctuation : Fragment() {[m
          * Setup date picker where user can set from where he want to display fluctuation from.[m
          * Since the API allow to see fluctuation back to 365 days, the minimum date is set to display max a year before actual date[m
          */[m
[31m-        mBinding.fluctuationFromDt.minDate = Calendar.getInstance().timeInMillis - mYearInMilis[m
[32m+[m[32m        mBinding.fluctuationFromDt.minDate = Calendar.getInstance().timeInMillis - mYearInMs[m
         mBinding.fluctuationFromDt.maxDate = Calendar.getInstance().timeInMillis[m
 [m
         mBinding.fluctuationSetFromOk.setOnClickListener {[m
[36m@@ -120,8 +139,9 @@[m [mclass Fluctuation : Fragment() {[m
             getDateFromUser(2)[m
             setupViewsForListView()[m
         }[m
[31m-        mBinding.fluctuationChangeBaseCurrency.setOnClickListener{[m
[32m+[m[32m        mBinding.fluctuationChangeBaseCurrency.setOnClickListener {[m
             setFragmentResult("request_key", bundleOf("fragment_name" to TAG))[m
[32m+[m[32m            findNavController().navigate(R.id.action_from_base_to_change)[m
         }[m
     }[m
 [m
[36m@@ -136,7 +156,7 @@[m [mclass Fluctuation : Fragment() {[m
                 mViewModel.startDate = mSdf.format(mCalendar.time).toString()[m
 [m
 //              After picking starting date, set "ending" date picker. As a minimum date, provide the selected earlier minimum date+1 day.[m
[31m-                mBinding.fluctuationToDt.minDate = (mCalendar.timeInMillis + mDayInMilis)[m
[32m+[m[32m                mBinding.fluctuationToDt.minDate = (mCalendar.timeInMillis + mDayInMs)[m
                 mBinding.fluctuationToDt.maxDate = Calendar.getInstance().timeInMillis[m
             }[m
             2 -> {[m
[36m@@ -220,6 +240,7 @@[m [mclass Fluctuation : Fragment() {[m
                         mIsTouched = true[m
                     }[m
                 }[m
[32m+[m
                 override fun onNothingSelected(p0: AdapterView<*>?) {[m
                     Log.i(TAG, "onNothingSelected: IN FLUCTUATION SPINNER")[m
                 }[m
[36m@@ -228,9 +249,14 @@[m [mclass Fluctuation : Fragment() {[m
 [m
     private fun setupListView(list: MutableList<CurrencyNamesModel>) {[m
         val symbols: MutableList<CurrencyNamesModel> = mutableListOf()[m
[31m-        val adapter = ArrayAdapter(requireActivity(), android.R.layout.simple_list_item_multiple_choice, list)[m
[32m+[m[32m        val adapter =[m
[32m+[m[32m            ArrayAdapter(requireActivity(), android.R.layout.simple_list_item_multiple_choice, list)[m
 [m
[31m-        Toast.makeText(activity, "Select up to 30 currencies, and then, click on the save button", Toast.LENGTH_SHORT).show()[m
[32m+[m[32m        Toast.makeText([m
[32m+[m[32m            activity,[m
[32m+[m[32m            "Select up to 30 currencies, and then, click on the save button",[m
[32m+[m[32m            Toast.LENGTH_SHORT[m
[32m+[m[32m        ).show()[m
 [m
         mBinding.fluctuationSelectSymbolsLv.choiceMode = ListView.CHOICE_MODE_MULTIPLE[m
         mBinding.fluctuationSelectSymbolsLv.adapter = adapter[m
[36m@@ -241,19 +267,25 @@[m [mclass Fluctuation : Fragment() {[m
                 position: Int,[m
                 id: Long[m
             ) {[m
[31m-/**             After every click, check if total selected amount of symbols is <= 30.[m
[31m-//              If user will try to select more than 30 symbols, inform him that he can't select more than 30 **/[m
[32m+[m[32m                /**             After every click, check if total selected amount of symbols is <= 30.[m
[32m+[m[32m                //              If user will try to select more than 30 symbols, inform him that he can't select more than 30 **/[m
                 if (mBinding.fluctuationSelectSymbolsLv.checkedItemCount > 30) {[m
[31m-                    Toast.makeText(requireContext(), "You can't select anymore currencies.", Toast.LENGTH_SHORT).show()[m
[32m+[m[32m                    Toast.makeText([m
[32m+[m[32m                        requireContext(),[m
[32m+[m[32m                        "You can't select anymore currencies.",[m
[32m+[m[32m                        Toast.LENGTH_SHORT[m
[32m+[m[32m                    ).show()[m
                     mBinding.fluctuationSelectSymbolsLv.setItemChecked(position, false)[m
                 }[m
[31m-                Log.i(TAG, "onItemClick: "+mBinding.fluctuationSelectSymbolsLv.checkedItemIds)[m
[32m+[m[32m                Log.i(TAG, "onItemClick: " + mBinding.fluctuationSelectSymbolsLv.checkedItemIds)[m
             }[m
         }[m
         mBinding.fluctuationSaveSymbols.setOnClickListener {[m
 //          Add to the created list all of the checked symbols. Next function will convert them into String[m
[31m-            for (i in 0 until list.size){[m
[31m-                if (mBinding.fluctuationSelectSymbolsLv.isItemChecked(i)){symbols.add(list[i])}[m
[32m+[m[32m            for (i in 0 until list.size) {[m
[32m+[m[32m                if (mBinding.fluctuationSelectSymbolsLv.isItemChecked(i)) {[m
[32m+[m[32m                    symbols.add(list[i])[m
[32m+[m[32m                }[m
             }[m
             getCurrencies(symbols)[m
         }[m
[36m@@ -261,7 +293,7 @@[m [mclass Fluctuation : Fragment() {[m
 [m
     private fun getCurrencies(list: MutableList<CurrencyNamesModel>) {[m
         for (i in 0 until list.size) {[m
[31m-                mConcatenatedSymbols += list[i].toString() + ", "[m
[32m+[m[32m            mConcatenatedSymbols += list[i].toString() + ", "[m
         }[m
 //      Pass converted symbols from list to String to the ViewModel. These symbol will be one of the endpoints needed to perform the call[m
         mViewModel.selectedCurrencies = mConcatenatedSymbols[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/HistoricalRates.kt b/app/src/main/java/com/example/currencyexchange/Fragments/HistoricalRates.kt[m
[1mindex 5253424..2e239eb 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/HistoricalRates.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/HistoricalRates.kt[m
[36m@@ -11,11 +11,13 @@[m [mimport android.widget.*[m
 import androidx.core.os.bundleOf[m
 import androidx.fragment.app.setFragmentResult[m
 import androidx.lifecycle.ViewModelProvider[m
[32m+[m[32mimport androidx.navigation.fragment.findNavController[m
 import androidx.recyclerview.widget.LinearLayoutManager[m
 import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.Adapters.HistoricalAdapter[m
 import com.example.currencyexchange.Application.CurrencyApplication[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
[32m+[m[32mimport com.example.currencyexchange.R[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
 import com.example.currencyexchange.ViewModels.HistoricalFactory[m
[36m@@ -75,6 +77,11 @@[m [mclass HistoricalRates : Fragment() {[m
             mBinding.historicalRv.layoutManager = LinearLayoutManager(this.context)[m
             mBinding.historicalRv.adapter = mHistoricalAdapter[m
         })[m
[32m+[m[32m//        mBinding.historicalRefreshContainer.setOnRefreshListener {[m
[32m+[m[32m//            //          TODO - finish refreshing. How to reset whole layout?[m
[32m+[m[32m//[m
[32m+[m[32m//            mBinding.historicalRefreshContainer.isRefreshing = false[m
[32m+[m[32m//        }[m
 [m
         return view[m
     }[m
[36m@@ -89,8 +96,10 @@[m [mclass HistoricalRates : Fragment() {[m
         mBinding.historicalSaveDate.setOnClickListener {[m
             getDate()[m
         }[m
[31m-        mBinding.historicalChangeBaseCurrency.setOnClickListener{[m
[32m+[m[32m        mBinding.historicalChangeBaseIcon.setOnClickListener {[m
             setFragmentResult("request_key", bundleOf("fragment_name" to TAG))[m
[32m+[m[32m            findNavController().navigate(R.id.action_from_base_to_change)[m
[32m+[m
         }[m
     }[m
 [m
[36m@@ -160,6 +169,7 @@[m [mclass HistoricalRates : Fragment() {[m
                         mIsTouched = true[m
                     }[m
                 }[m
[32m+[m
                 override fun onNothingSelected(p0: AdapterView<*>?) {[m
                     Log.i(TAG, "onNothingSelected in historical spinner ")[m
                 }[m
[36m@@ -179,26 +189,27 @@[m [mclass HistoricalRates : Fragment() {[m
 [m
         mBinding.historicalSymbolsLv.adapter = adapter[m
         mBinding.historicalSymbolsLv.choiceMode = ListView.CHOICE_MODE_MULTIPLE[m
[31m-        mBinding.historicalSymbolsLv.onItemClickListener = object : AdapterView.OnItemClickListener {[m
[31m-            override fun onItemClick([m
[31m-                parent: AdapterView<*>?,[m
[31m-                view: View?,[m
[31m-                position: Int,[m
[31m-                id: Long[m
[31m-            ) {[m
[31m-                /** After every click, check if total selected amount of symbols is <= 30.[m
[31m-                //  If user will try to select more than 30 symbols, inform him that he can't select more than 30 **/[m
[31m-[m
[31m-                if (mBinding.historicalSymbolsLv.checkedItemCount > 30) {[m
[31m-                    Toast.makeText([m
[31m-                        requireContext(),[m
[31m-                        "You can't select anymore currencies.",[m
[31m-                        Toast.LENGTH_SHORT[m
[31m-                    ).show()[m
[31m-                    mBinding.historicalSymbolsLv.setItemChecked(position, false)[m
[32m+[m[32m        mBinding.historicalSymbolsLv.onItemClickListener =[m
[32m+[m[32m            object : AdapterView.OnItemClickListener {[m
[32m+[m[32m                override fun onItemClick([m
[32m+[m[32m                    parent: AdapterView<*>?,[m
[32m+[m[32m                    view: View?,[m
[32m+[m[32m                    position: Int,[m
[32m+[m[32m                    id: Long[m
[32m+[m[32m                ) {[m
[32m+[m[32m                    /** After every click, check if total selected amount of symbols is <= 30.[m
[32m+[m[32m                    //  If user will try to select more than 30 symbols, inform him that he can't select more than 30 **/[m
[32m+[m
[32m+[m[32m                    if (mBinding.historicalSymbolsLv.checkedItemCount > 30) {[m
[32m+[m[32m                        Toast.makeText([m
[32m+[m[32m                            requireContext(),[m
[32m+[m[32m                            "You can't select anymore currencies.",[m
[32m+[m[32m                            Toast.LENGTH_SHORT[m
[32m+[m[32m                        ).show()[m
[32m+[m[32m                        mBinding.historicalSymbolsLv.setItemChecked(position, false)[m
[32m+[m[32m                    }[m
                 }[m
             }[m
[31m-        }[m
         mBinding.historicalSaveSymbols.setOnClickListener {[m
             //          Add to the created list all of the checked symbols. Next function will convert them into String[m
             for (i in 0 until list.size) {[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/Latest.kt b/app/src/main/java/com/example/currencyexchange/Fragments/Latest.kt[m
[1mindex 4088679..2d30790 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/Latest.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/Latest.kt[m
[36m@@ -1,21 +1,23 @@[m
 package com.example.currencyexchange.Fragments[m
 [m
 import android.os.Bundle[m
[31m-import android.util.Log[m
 import android.view.*[m
 import androidx.core.os.bundleOf[m
 import androidx.fragment.app.Fragment[m
 import androidx.fragment.app.setFragmentResult[m
 import androidx.lifecycle.Observer[m
 import androidx.lifecycle.ViewModelProvider[m
[32m+[m[32mimport androidx.navigation.findNavController[m
 import androidx.recyclerview.widget.LinearLayoutManager[m
 import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.Adapters.CurrencyAdapter[m
 import com.example.currencyexchange.Application.CurrencyApplication[m
[32m+[m[32mimport com.example.currencyexchange.R[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
 import com.example.currencyexchange.ViewModels.*[m
 import com.example.currencyexchange.databinding.FragmentLatestBinding[m
[32m+[m[32mimport kotlin.math.log[m
 [m
 //    TODO - add collapsing toolbar[m
 [m
[36m@@ -42,12 +44,10 @@[m [mclass Latest : Fragment() {[m
 [m
         mBinding.latestRv.layoutManager = LinearLayoutManager(this.context)[m
         mBinding.latestRv.adapter = mAdapter[m
[31m-        mBinding.latestRefreshContainer.setOnRefreshListener {[m
[31m-            getBaseCurrency()[m
[31m-            mBinding.latestRefreshContainer.isRefreshing = false[m
[31m-        }[m
[31m-        mBinding.latestChangeBaseCurrency.setOnClickListener {[m
[32m+[m
[32m+[m[32m        mBinding.latestChangeBase.setOnClickListener {[m
             setFragmentResult("request_key", bundleOf("fragment_name" to TAG))[m
[32m+[m[32m            it.findNavController().navigate(R.id.action_from_base_to_change)[m
         }[m
 [m
         mDatabaseServices = (activity?.application as CurrencyApplication).repository[m
[36m@@ -77,7 +77,7 @@[m [mclass Latest : Fragment() {[m
         mViewModel.fetchLatestRates(mBaseCurrency)[m
         mViewModel.latestRates.observe(viewLifecycleOwner, Observer {[m
             mBinding.latestBase.text = String.format("Base Currency: %s", mBaseCurrency)[m
[31m-            if (it.latestRates.containsKey(mBaseCurrency)){[m
[32m+[m[32m            if (it.latestRates.containsKey(mBaseCurrency)) {[m
                 it.latestRates.remove(mBaseCurrency)[m
             }[m
             mAdapter.setData(it.latestRates.toSortedMap())[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Fragments/PagerBase.kt b/app/src/main/java/com/example/currencyexchange/Fragments/PagerBase.kt[m
[1mindex 02b3a56..905ba2f 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Fragments/PagerBase.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Fragments/PagerBase.kt[m
[36m@@ -1,13 +1,10 @@[m
 package com.example.currencyexchange.Fragments[m
 [m
[31m-import android.content.ContentValues.TAG[m
 import android.os.Bundle[m
[31m-import android.util.Log[m
 import android.view.LayoutInflater[m
 import android.view.View[m
 import android.view.ViewGroup[m
 import androidx.fragment.app.Fragment[m
[31m-import androidx.navigation.fragment.NavHostFragment[m
 import com.example.currencyexchange.Adapters.PagerAdapter[m
 import com.example.currencyexchange.databinding.FragmentPagerBaseBinding[m
 [m
[36m@@ -15,6 +12,8 @@[m [mimport com.example.currencyexchange.databinding.FragmentPagerBaseBinding[m
 class PagerBase : Fragment() {[m
     private var _binding: FragmentPagerBaseBinding? = null[m
     private val mBinding get() = _binding!![m
[32m+[m[32m    private lateinit var pagerAdapter: PagerAdapter[m
[32m+[m[32m    private val fragmentsList = listOf(Latest(), Conversion(), Fluctuation(), HistoricalRates())[m
 [m
     override fun onCreateView([m
         inflater: LayoutInflater,[m
[36m@@ -23,15 +22,11 @@[m [mclass PagerBase : Fragment() {[m
     ): View {[m
         _binding = FragmentPagerBaseBinding.inflate(inflater, container, false)[m
         val view = mBinding.root[m
[32m+[m
[32m+[m
[32m+[m[32m        pagerAdapter = PagerAdapter(this, fragmentsList)[m
         mBinding.pbViewpager.let {[m
[31m-            it.adapter = PagerAdapter(this)[m
[31m-        }[m
[31m-        childFragmentManager.setFragmentResultListener([m
[31m-            "request_key",[m
[31m-            this[m
[31m-        ) { requestKey, bundle ->[m
[31m-            val fragmentName = bundle.getString("fragment_name")[m
[31m-            navigateToChangeBase(fragmentName!!)[m
[32m+[m[32m            it.adapter = pagerAdapter[m
         }[m
         return view[m
     }[m
[36m@@ -40,41 +35,34 @@[m [mclass PagerBase : Fragment() {[m
     Find out which fragment called this fun, and navigate to change base fragment.[m
     Set the argument as a name of fragment that this fun was called from[m
      */[m
[31m-    private fun navigateToChangeBase(fragmentName: String) {[m
[31m-        when (fragmentName) {[m
[31m-            "Latest" -> {[m
[31m-                val provideLatest =[m
[31m-                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[31m-                NavHostFragment.findNavController(this).navigate(provideLatest)[m
[31m-                Log.i(TAG, "navigateToChangeBase: FROM LATEST")[m
[31m-            }[m
[31m-            "Fluctuation" -> {[m
[31m-                val provideFluctuation =[m
[31m-                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[31m-                NavHostFragment.findNavController(this).navigate(provideFluctuation)[m
[31m-                Log.i(TAG, "navigateToChangeBase: FROM FLUCTUATION")[m
[31m-[m
[31m-            }[m
[31m-            "Conversion" -> {[m
[31m-                val provideConversion =[m
[31m-                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[31m-                NavHostFragment.findNavController(this).navigate(provideConversion)[m
[31m-                Log.i(TAG, "navigateToChangeBase: FROM CONVERSION")[m
[31m-[m
[31m-            }[m
[31m-            "HistoricalRates" -> {[m
[31m-                val provideHistoricalRates =[m
[31m-                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[31m-                NavHostFragment.findNavController(this).navigate(provideHistoricalRates)[m
[31m-                Log.i(TAG, "navigateToChangeBase: FROM HISTORICAL")[m
[31m-            }[m
[31m-[m
[31m-            "test" -> {[m
[31m-                val provideLatest =[m
[31m-                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[31m-                NavHostFragment.findNavController(this).navigate(provideLatest)[m
[31m-                Log.i(TAG, "navigateToChangeBase: FROM LATEST")[m
[31m-            }[m
[31m-        }[m
[32m+[m[32m    fun navigateToChangeBase(fragmentName: String) {[m
[32m+[m[32m//        when (fragmentName) {[m
[32m+[m[32m//            "Latest" -> {[m
[32m+[m[32m//                val provideLatest =[m
[32m+[m[32m//                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[32m+[m[32m//                NavHostFragment.findNavController(this).navigate(provideLatest)[m
[32m+[m[32m//                Log.i(TAG, "navigateToChangeBase: FROM LATEST")[m
[32m+[m[32m//            }[m
[32m+[m[32m//            "Fluctuation" -> {[m
[32m+[m[32m//                val provideFluctuation =[m
[32m+[m[32m//                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[32m+[m[32m//                NavHostFragment.findNavController(this).navigate(provideFluctuation)[m
[32m+[m[32m//                Log.i(TAG, "navigateToChangeBase: FROM FLUCTUATION")[m
[32m+[m[32m//[m
[32m+[m[32m//            }[m
[32m+[m[32m//            "Conversion" -> {[m
[32m+[m[32m//                val provideConversion =[m
[32m+[m[32m//                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[32m+[m[32m//                NavHostFragment.findNavController(this).navigate(provideConversion)[m
[32m+[m[32m//                Log.i(TAG, "navigateToChangeBase: FROM CONVERSION")[m
[32m+[m[32m//[m
[32m+[m[32m//            }[m
[32m+[m[32m//            "HistoricalRates" -> {[m
[32m+[m[32m//                val provideHistoricalRates =[m
[32m+[m[32m//                    PagerBaseDirections.actionFromBaseToChange().setFragmentName(fragmentName)[m
[32m+[m[32m//                NavHostFragment.findNavController(this).navigate(provideHistoricalRates)[m
[32m+[m[32m//                Log.i(TAG, "navigateToChangeBase: FROM HISTORICAL")[m
[32m+[m[32m//            }[m
[32m+[m[32m//        }[m
     }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/MainActivity.kt b/app/src/main/java/com/example/currencyexchange/MainActivity.kt[m
[1mindex 80baf85..c66c1a0 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/MainActivity.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/MainActivity.kt[m
[36m@@ -2,9 +2,6 @@[m [mpackage com.example.currencyexchange[m
 [m
 import androidx.appcompat.app.AppCompatActivity[m
 import android.os.Bundle[m
[31m-import androidx.fragment.app.Fragment[m
[31m-import androidx.viewpager2.widget.ViewPager2[m
[31m-import com.example.currencyexchange.Adapters.PagerAdapter[m
 [m
 class MainActivity : AppCompatActivity() {[m
     override fun onCreate(savedInstanceState: Bundle?) {[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Models/CurrencyNamesModel.kt b/app/src/main/java/com/example/currencyexchange/Models/CurrencyNamesModel.kt[m
[1mindex 3b51596..0e2f468 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Models/CurrencyNamesModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Models/CurrencyNamesModel.kt[m
[36m@@ -2,7 +2,6 @@[m [mpackage com.example.currencyexchange.Models[m
 [m
 import androidx.room.ColumnInfo[m
 import androidx.room.Entity[m
[31m-import androidx.room.Ignore[m
 import androidx.room.PrimaryKey[m
 [m
 [m
[36m@@ -13,7 +12,7 @@[m [mdata class CurrencyNamesModel([m
     @ColumnInfo(name = "currency_name")[m
     val currency: String,[m
 [m
[31m-) {[m
[32m+[m[32m    ) {[m
     override fun toString(): String {[m
         return this.currency[m
     }[m
[36m@@ -25,8 +24,7 @@[m [mdata class BaseCurrencyModel([m
     val id: Int,[m
     @ColumnInfo(name = "base")[m
     val baseCurr: String[m
[31m-)[m
[31m-{[m
[32m+[m[32m) {[m
     override fun toString(): String {[m
         return this.baseCurr[m
     }[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Models/CurrencyRetrofitModel.kt b/app/src/main/java/com/example/currencyexchange/Models/CurrencyRetrofitModel.kt[m
[1mindex 9e9b90e..b9498c5 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Models/CurrencyRetrofitModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Models/CurrencyRetrofitModel.kt[m
[36m@@ -40,8 +40,6 @@[m [mdata class Info([m
     val currencyRate: Double?[m
 )[m
 [m
[31m-[m
[31m-[m
 data class Test([m
     @SerializedName("start_rate")[m
     val startRate: Double,[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Models/FluctuationModel.kt b/app/src/main/java/com/example/currencyexchange/Models/FluctuationModel.kt[m
[1mindex 3b3e1eb..db3f4af 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Models/FluctuationModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Models/FluctuationModel.kt[m
[36m@@ -1,7 +1,5 @@[m
 package com.example.currencyexchange.Models[m
 [m
[31m-import android.provider.Telephony.Mms.Rate[m
[31m-import com.example.currencyexchange.Fragments.Fluctuation[m
 import com.google.gson.annotations.SerializedName[m
 [m
 data class FluctuationModel([m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Repository/CurrencyDatabaseRepository.kt b/app/src/main/java/com/example/currencyexchange/Repository/CurrencyDatabaseRepository.kt[m
[1mindex 2d87e17..da71042 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Repository/CurrencyDatabaseRepository.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Repository/CurrencyDatabaseRepository.kt[m
[36m@@ -1,17 +1,14 @@[m
 package com.example.currencyexchange.Repository[m
 [m
 import androidx.annotation.WorkerThread[m
[31m-import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.DAO.CurrencyDAO[m
 import com.example.currencyexchange.Models.BaseCurrencyModel[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
 import kotlinx.coroutines.flow.Flow[m
 [m
 class CurrencyDatabaseRepository constructor(private val currencyDAO: CurrencyDAO) {[m
[31m-//    class CurrencyRetrofitRepository constructor(private val apiServices: ApiServices) {[m
 [m
[31m-[m
[31m-        //  Insert new currency into the database[m
[32m+[m[32m    //  Insert new currency into the database[m
     @Suppress("RedundantSuspendModifier")[m
     @WorkerThread[m
     suspend fun insertNewCurrency(currencyNamesModel: CurrencyNamesModel) {[m
[36m@@ -21,7 +18,7 @@[m [mclass CurrencyDatabaseRepository constructor(private val currencyDAO: CurrencyDA[m
     //  Update base currency[m
     @Suppress("RedundantSuspendModifier")[m
     @WorkerThread[m
[31m-    suspend fun updateBaseCurrency(baseCurrencyModel: BaseCurrencyModel){[m
[32m+[m[32m    suspend fun updateBaseCurrency(baseCurrencyModel: BaseCurrencyModel) {[m
         currencyDAO.updateBaseCurrency(baseCurrencyModel)[m
     }[m
 [m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/Repository/CurrencyRetrofitRepository.kt b/app/src/main/java/com/example/currencyexchange/Repository/CurrencyRetrofitRepository.kt[m
[1mindex a1f5186..8b3ca2c 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/Repository/CurrencyRetrofitRepository.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/Repository/CurrencyRetrofitRepository.kt[m
[36m@@ -3,12 +3,28 @@[m [mpackage com.example.currencyexchange.Repository[m
 import com.example.currencyexchange.API.ApiServices[m
 import com.example.currencyexchange.BuildConfig[m
 [m
[31m-[m
 class CurrencyRetrofitRepository constructor(private val apiServices: ApiServices) {[m
 [m
[31m-    fun fetchLatestRates(baseCurrency: String) = apiServices.getRatesData(baseCurrency, BuildConfig.API_KEY)[m
[31m-    fun fetchFluctuation(startDate: String, endDate:String, baseCurrency: String, symbols: String) = apiServices.getFluctuationData(startDate, endDate, baseCurrency, symbols, BuildConfig.API_KEY)[m
[31m-    fun convertCurrency(from: String, to: String, amount: String) = apiServices.convertCurrency(from, to, amount, BuildConfig.API_KEY)[m
[31m-    fun fetchHistoricalData(data: String, symbols: String, base: String) = apiServices.getHistoricalData(data, symbols, base, BuildConfig.API_KEY)[m
[32m+[m[32m    fun fetchLatestRates(baseCurrency: String) =[m
[32m+[m[32m        apiServices.getRatesData(baseCurrency, BuildConfig.API_KEY)[m
[32m+[m
[32m+[m[32m    fun fetchFluctuation([m
[32m+[m[32m        startDate: String,[m
[32m+[m[32m        endDate: String,[m
[32m+[m[32m        baseCurrency: String,[m
[32m+[m[32m        symbols: String[m
[32m+[m[32m    ) = apiServices.getFluctuationData([m
[32m+[m[32m        startDate,[m
[32m+[m[32m        endDate,[m
[32m+[m[32m        baseCurrency,[m
[32m+[m[32m        symbols,[m
[32m+[m[32m        BuildConfig.API_KEY[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m    fun convertCurrency(from: String, to: String, amount: String) =[m
[32m+[m[32m        apiServices.convertCurrency(from, to, amount, BuildConfig.API_KEY)[m
[32m+[m
[32m+[m[32m    fun fetchHistoricalData(data: String, symbols: String, base: String) =[m
[32m+[m[32m        apiServices.getHistoricalData(data, symbols, base, BuildConfig.API_KEY)[m
 [m
 }[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/ViewModels/ChangeBaseViewModel.kt b/app/src/main/java/com/example/currencyexchange/ViewModels/ChangeBaseViewModel.kt[m
[1mindex 6dc5963..deca081 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/ViewModels/ChangeBaseViewModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/ViewModels/ChangeBaseViewModel.kt[m
[36m@@ -6,7 +6,6 @@[m [mimport androidx.lifecycle.asLiveData[m
 import androidx.lifecycle.viewModelScope[m
 import com.example.currencyexchange.Models.BaseCurrencyModel[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
[31m-import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
 import kotlinx.coroutines.launch[m
 [m
 class ChangeBaseViewModel constructor([m
[36m@@ -16,7 +15,7 @@[m [mclass ChangeBaseViewModel constructor([m
     val baseCurrency = currencyDatabaseRepository.baseCurrency.asLiveData()[m
     val currencyList = currencyDatabaseRepository.allCurrencies.asLiveData()[m
 [m
[31m-     fun updateBaseCurrency(selectedCurrency: String) {[m
[32m+[m[32m    fun updateBaseCurrency(selectedCurrency: String) {[m
         viewModelScope.launch {[m
             val newBase = currencyDatabaseRepository.updateBaseCurrency([m
                 BaseCurrencyModel([m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/ViewModels/ConversionViewModel.kt b/app/src/main/java/com/example/currencyexchange/ViewModels/ConversionViewModel.kt[m
[1mindex 674ee8a..e69334e 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/ViewModels/ConversionViewModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/ViewModels/ConversionViewModel.kt[m
[36m@@ -7,8 +7,6 @@[m [mimport com.example.currencyexchange.Models.CurrencyModel[m
 import com.example.currencyexchange.Models.CurrencyNamesModel[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
[31m-import kotlinx.coroutines.flow.collect[m
[31m-import kotlinx.coroutines.launch[m
 import retrofit2.Call[m
 import retrofit2.Response[m
 import java.lang.IllegalArgumentException[m
[36m@@ -23,12 +21,11 @@[m [mclass ConversionViewModel constructor([m
     var baseCurrency: LiveData<String> = databaseRepository.baseCurrency.asLiveData()[m
     var conversionResult = MutableLiveData<Double>()[m
 [m
[31m-    [m
[32m+[m
     fun conversionCall(from: String, to: String, amount: String) {[m
         val response = apiRepository.convertCurrency(from, to, amount)[m
         response.enqueue(object : retrofit2.Callback<CurrencyModel> {[m
             override fun onResponse(call: Call<CurrencyModel>, response: Response<CurrencyModel>) {[m
[31m-                Log.i(TAG, "onResponse: CONVERSION ${response.code()}")[m
                 if (response.isSuccessful) {[m
                     conversionResult.value = response.body()?.result[m
                 }[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/ViewModels/FluctuationViewModel.kt b/app/src/main/java/com/example/currencyexchange/ViewModels/FluctuationViewModel.kt[m
[1mindex 3e61c5d..7f5bf89 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/ViewModels/FluctuationViewModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/ViewModels/FluctuationViewModel.kt[m
[36m@@ -1,23 +1,14 @@[m
 package com.example.currencyexchange.ViewModels[m
 [m
 import android.content.ContentValues.TAG[m
[31m-import android.provider.Telephony.Mms.Rate[m
 import android.util.Log[m
 import androidx.lifecycle.*[m
[31m-import com.example.currencyexchange.Adapters.FluctuationAdapter[m
[31m-import com.example.currencyexchange.Models.CurrencyNamesModel[m
 import com.example.currencyexchange.Models.FluctuationModel[m
[31m-import com.example.currencyexchange.Models.Rates[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
[31m-import kotlinx.coroutines.Dispatchers[m
[31m-import kotlinx.coroutines.GlobalScope[m
[31m-import kotlinx.coroutines.delay[m
 import kotlinx.coroutines.launch[m
 import retrofit2.Call[m
 import retrofit2.Response[m
[31m-import javax.security.auth.callback.Callback[m
[31m-import kotlin.math.log[m
 [m
 class FluctuationViewModel constructor([m
     private val apiRepository: CurrencyRetrofitRepository,[m
[36m@@ -35,26 +26,33 @@[m [mclass FluctuationViewModel constructor([m
     var currenciesNames = MutableLiveData<String>()[m
     var currenciesStartRates = MutableLiveData<Double>()[m
     var currenciesEndRates = MutableLiveData<Double>()[m
[32m+[m
     var currenciesChange = MutableLiveData<Double>()[m
     var currenciesChangePct = MutableLiveData<Double>()[m
 [m
     fun fetchFluctuation(baseCurrency: String) {[m
         viewModelScope.launch {[m
[31m-            val response = apiRepository.fetchFluctuation(startDate, endDate, baseCurrency, selectedCurrencies)[m
[32m+[m[32m            val response =[m
[32m+[m[32m                apiRepository.fetchFluctuation(startDate, endDate, baseCurrency, selectedCurrencies)[m
             response.enqueue(object : retrofit2.Callback<FluctuationModel> {[m
[31m-                override fun onResponse(call: Call<FluctuationModel>, response: Response<FluctuationModel>) {[m
[31m-                    if (response.isSuccessful){[m
[31m-                        Log.i(TAG, "onResponse: TEST ${response.body()?.base}")[m
[31m-                        for (i in response.body()?.rates?.keys!!){[m
[32m+[m[32m                override fun onResponse([m
[32m+[m[32m                    call: Call<FluctuationModel>,[m
[32m+[m[32m                    response: Response<FluctuationModel>[m
[32m+[m[32m                ) {[m
[32m+[m[32m                    if (response.isSuccessful) {[m
[32m+[m[32m                        for (i in response.body()?.rates?.keys!!) {[m
                             currenciesNames.value = i[m
[31m-                            currenciesStartRates.value = response.body()?.rates?.getValue(i)?.start_rate[m
[32m+[m[32m                            currenciesStartRates.value =[m
[32m+[m[32m                                response.body()?.rates?.getValue(i)?.start_rate[m
                             currenciesEndRates.value = response.body()?.rates?.getValue(i)?.end_rate[m
                             currenciesChange.value = response.body()?.rates?.getValue(i)?.change[m
[31m-                            currenciesChangePct.value = response.body()?.rates?.getValue(i)?.change_pct[m
[32m+[m[32m                            currenciesChangePct.value =[m
[32m+[m[32m                                response.body()?.rates?.getValue(i)?.change_pct[m
                         }[m
                         isDone.value = true[m
                     }[m
                 }[m
[32m+[m
                 override fun onFailure(call: Call<FluctuationModel>, t: Throwable) {[m
                     Log.i(TAG, "onFailure: ${t.message}")[m
                 }[m
[36m@@ -62,15 +60,16 @@[m [mclass FluctuationViewModel constructor([m
         }[m
     }[m
 }[m
[31m-    class FluctuationFactory([m
[31m-        private val apiRepository: CurrencyRetrofitRepository,[m
[31m-        private val databaseRepository: CurrencyDatabaseRepository[m
[31m-    ) : ViewModelProvider.Factory {[m
[31m-        override fun <T : ViewModel> create(modelClass: Class<T>): T {[m
[31m-            if (modelClass.isAssignableFrom(FluctuationViewModel::class.java)) {[m
[31m-                @Suppress("UNCHECKED_CAST")[m
[31m-                return FluctuationViewModel(apiRepository, databaseRepository) as T[m
[31m-            }[m
[31m-            throw IllegalArgumentException("UNKNOWN CAST FROM FLUCTUATION FACTORY")[m
[32m+[m
[32m+[m[32mclass FluctuationFactory([m
[32m+[m[32m    private val apiRepository: CurrencyRetrofitRepository,[m
[32m+[m[32m    private val databaseRepository: CurrencyDatabaseRepository[m
[32m+[m[32m) : ViewModelProvider.Factory {[m
[32m+[m[32m    override fun <T : ViewModel> create(modelClass: Class<T>): T {[m
[32m+[m[32m        if (modelClass.isAssignableFrom(FluctuationViewModel::class.java)) {[m
[32m+[m[32m            @Suppress("UNCHECKED_CAST")[m
[32m+[m[32m            return FluctuationViewModel(apiRepository, databaseRepository) as T[m
         }[m
[31m-    }[m
\ No newline at end of file[m
[32m+[m[32m        throw IllegalArgumentException("UNKNOWN CAST FROM FLUCTUATION FACTORY")[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/java/com/example/currencyexchange/ViewModels/HistoricalViewModel.kt b/app/src/main/java/com/example/currencyexchange/ViewModels/HistoricalViewModel.kt[m
[1mindex 73b938e..6b6202e 100644[m
[1m--- a/app/src/main/java/com/example/currencyexchange/ViewModels/HistoricalViewModel.kt[m
[1m+++ b/app/src/main/java/com/example/currencyexchange/ViewModels/HistoricalViewModel.kt[m
[36m@@ -3,8 +3,6 @@[m [mpackage com.example.currencyexchange.ViewModels[m
 import android.content.ContentValues.TAG[m
 import android.util.Log[m
 import androidx.lifecycle.*[m
[31m-import com.example.currencyexchange.Models.CurrencyModel[m
[31m-import com.example.currencyexchange.Models.CurrencyNamesModel[m
 import com.example.currencyexchange.Models.HistoricalRatesModel[m
 import com.example.currencyexchange.Repository.CurrencyDatabaseRepository[m
 import com.example.currencyexchange.Repository.CurrencyRetrofitRepository[m
[1mdiff --git a/app/src/main/res/layout/currency_row.xml b/app/src/main/res/layout/currency_row.xml[m
[1mindex 4d90351..e260943 100644[m
[1m--- a/app/src/main/res/layout/currency_row.xml[m
[1m+++ b/app/src/main/res/layout/currency_row.xml[m
[36m@@ -12,13 +12,15 @@[m
         android:layout_width="wrap_content"[m
         android:layout_height="wrap_content"[m
         android:padding="20dp"[m
[31m-        android:textSize="17sp"/>[m
[32m+[m[32m        android:textSize="17sp"[m
[32m+[m[32m        android:text="@string/currency_item_name"/>[m
 [m
         <TextView[m
             android:id="@+id/latest_currency_value"[m
             android:layout_width="wrap_content"[m
             android:layout_height="wrap_content"[m
             android:textSize="17sp"[m
[31m-            android:layout_marginStart="30dp"/>[m
[32m+[m[32m            android:layout_marginStart="30dp"[m
[32m+[m[32m            android:text="@string/currency_item_value"/>[m
     </LinearLayout>[m
 </LinearLayout>[m
\ No newline at end of file[m
[1mdiff --git a/app/src/main/res/layout/fragment_historical_rates.xml b/app/src/main/res/layout/fragment_historical_rates.xml[m
[1mindex 25a6356..803ea6f 100644[m
[1m--- a/app/src/main/res/layout/fragment_historical_rates.xml[m
[1m+++ b/app/src/main/res/layout/fragment_historical_rates.xml[m
[36m@@ -34,6 +34,7 @@[m
                 android:textAlignment="center"/>[m
 [m
             <ImageView[m
[32m+[m[32m                android:id="@+id/historical_change_base_icon"[m
                 android:layout_width="wrap_content"[m
                 android:layout_height="wrap_content"[m
                 app:srcCompat="@drawable/currency_exchange"[m
[1mdiff --git a/app/src/main/res/layout/fragment_latest.xml b/app/src/main/res/layout/fragment_latest.xml[m
[1mindex 5a07a4f..9d009d4 100644[m
[1m--- a/app/src/main/res/layout/fragment_latest.xml[m
[1m+++ b/app/src/main/res/layout/fragment_latest.xml[m
[36m@@ -35,6 +35,7 @@[m
                 android:textAlignment="center"/>[m
 [m
             <ImageView[m
[32m+[m[32m                android:id="@+id/latest_change_base"[m
                 android:layout_width="wrap_content"[m
                 android:layout_height="wrap_content"[m
                 app:srcCompat="@drawable/currency_exchange"[m
[1mdiff --git a/app/src/main/res/navigation/nav_graph.xml b/app/src/main/res/navigation/nav_graph.xml[m
[1mindex 9bac77d..b58cc71 100644[m
[1m--- a/app/src/main/res/navigation/nav_graph.xml[m
[1m+++ b/app/src/main/res/navigation/nav_graph.xml[m
[36m@@ -5,7 +5,6 @@[m
     android:id="@+id/nav_graph"[m
     app:startDestination="@id/pagerBase">[m
 [m
[31m-[m
     <fragment[m
         android:id="@+id/changeBaseCurrency"[m
         android:name="com.example.currencyexchange.Fragments.ChangeBaseCurrency"[m
[36m@@ -23,7 +22,7 @@[m
         android:id="@+id/pagerBase"[m
         android:name="com.example.currencyexchange.Fragments.PagerBase"[m
         android:label="fragment_pager_base"[m
[31m-        tools:layout="@layout/fragment_pager_base" >[m
[32m+[m[32m        tools:layout="@layout/fragment_pager_base">[m
         <action[m
             android:id="@+id/action_from_base_to_change"[m
             app:destination="@id/changeBaseCurrency" />[m
